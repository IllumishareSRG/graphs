// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewStake extends ethereum.Event {
  get params(): NewStake__Params {
    return new NewStake__Params(this);
  }
}

export class NewStake__Params {
  _event: NewStake;

  constructor(event: NewStake) {
    this._event = event;
  }

  get stakeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get stakerAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amountStaked(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class StakePaid extends ethereum.Event {
  get params(): StakePaid__Params {
    return new StakePaid__Params(this);
  }
}

export class StakePaid__Params {
  _event: StakePaid;

  constructor(event: StakePaid) {
    this._event = event;
  }

  get stakeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get stakerAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amountStaked(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ColdStaking__stakesResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getStakeId(): BigInt {
    return this.value0;
  }

  getStakerAddress(): Address {
    return this.value1;
  }

  getAmountStaked(): BigInt {
    return this.value2;
  }

  getFinalReward(): BigInt {
    return this.value3;
  }

  getDeadline(): BigInt {
    return this.value4;
  }
}

export class ColdStaking extends ethereum.SmartContract {
  static bind(address: Address): ColdStaking {
    return new ColdStaking("ColdStaking", address);
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  srgToken(): Address {
    let result = super.call("srgToken", "srgToken():(address)", []);

    return result[0].toAddress();
  }

  try_srgToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("srgToken", "srgToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakeCounter(): BigInt {
    let result = super.call("stakeCounter", "stakeCounter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_stakeCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("stakeCounter", "stakeCounter():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakedBalance(param0: Address): BigInt {
    let result = super.call(
      "stakedBalance",
      "stakedBalance(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_stakedBalance(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakedBalance",
      "stakedBalance(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakes(param0: BigInt): ColdStaking__stakesResult {
    let result = super.call(
      "stakes",
      "stakes(uint256):(uint256,address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ColdStaking__stakesResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_stakes(param0: BigInt): ethereum.CallResult<ColdStaking__stakesResult> {
    let result = super.tryCall(
      "stakes",
      "stakes(uint256):(uint256,address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ColdStaking__stakesResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _srgTokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get dayAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnStakeCall extends ethereum.Call {
  get inputs(): UnStakeCall__Inputs {
    return new UnStakeCall__Inputs(this);
  }

  get outputs(): UnStakeCall__Outputs {
    return new UnStakeCall__Outputs(this);
  }
}

export class UnStakeCall__Inputs {
  _call: UnStakeCall;

  constructor(call: UnStakeCall) {
    this._call = call;
  }

  get stakeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnStakeCall__Outputs {
  _call: UnStakeCall;

  constructor(call: UnStakeCall) {
    this._call = call;
  }
}
